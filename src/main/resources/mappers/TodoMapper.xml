<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.mytodo.mapper.TodoMapper">

    <!-- MyBatis 쿼리 목록 -->
    <select id="getTime" resultType="string">
        select now()
    </select>

    <insert id="insert">
        <!-- '?' 대신에 #{} 으로 파라미터 처리 -->
        <!-- ${} 부분이 PreparedStatement로 다시 변경되면서 '?'로 처리되고, 주어진 객체의 getXXX()을 호출한 결과를 적용하게 됨 -->
        insert into tbl_todo (title, dueDate, writer) values (#{title}, #{dueDate}, #{writer})
    </insert>

    <!-- tno 내림차순(최근 글 부터)으로 select -->
    <select id="selectAll" resultType="com.study.mytodo.domain.TodoVO">
        select * from tbl_todo order by tno desc
    </select>

    <!-- tno를 통해 조회 -->
    <select id="selectOne" resultType="com.study.mytodo.domain.TodoVO">
        select * from tbl_todo where tno = #{tno}
    </select>

    <!-- tno를 통해 삭제 -->
    <delete id="delete">
        delete from tbl_todo where tno = #{tno}
    </delete>

    <!-- tno 번호의 title, dueDate, finished 수정 -->
    <update id="update">
        update tbl_todo set title = #{title}, dueDate = #{dueDate}, finished = #{finished} where tno = #{tno}
    </update>

    <!-- 검색과 필터링을 위한 동적 쿼리. 특정 상황에 따라 SQL 쿼리의 일부를 포함하거나 제외하거나 조건을 추가한다. -->
    <sql id="search">
        <!-- <where>은 태그 안쪽에서 문자열이 생성되어야만 where 키워드를 추가한다. -->
        <where>
            <!-- types가 null인 경우엔 where 키워드를 생성하지 않는다. -->
            <if test="types != null and types.length > 0">
                <!-- 제목, 작성자에 대한 검색 처리 -->
                <foreach collection="types" item="type" open="(" close=")" separator=" OR ">
                    <if test="type == 't'.toString()">
                        title like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'w'.toString()">
                        writer like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
            <!-- 완료 여부에 대한 필터링 -->
            <!-- finished 값이 true일 때만 finished = 1 문자열이 만들어지도록 한다 -->
            <if test="finished">
                <!-- 앞에 검색 조건이 있는 경우 and finished=1을 붙이고 없는 경우엔 and 없이 그냥 finished=1이 되어야한다 -->
                <trim prefix="and">
                    finished = 1
                </trim>
            </if>
            <!-- 만료일에 대한 필터링 -->
            <if test="from != null and to != null">
                <trim prefix="and">
                    dueDate between #{from} and #{to}
                </trim>
            </if>
        </where>
    </sql>

    <!-- PageRequestDTO에 있는 정보로 limit 값을 설정해서 select -->
    <!-- MyBatis는 기본적으로 getXXX로 동작하기 때문에 #{skip}은 getSkip()을 호출한다. -->
    <select id="selectList" resultType="com.study.mytodo.domain.TodoVO">
        select * from tbl_todo
        <!-- include는 동적쿼리(sql id=...)가 적용될 부분 -->
        <include refid="search"></include>

        order by tno desc limit #{skip}, #{size}
    </select>
    <!-- 동적 쿼리 X인 경우 select * from tbl_todo order by tno desc limit ?, ? -->
    <!-- 동적 쿼리가 포함된 경우
        select * from tbl_todo WHERE ( title like concat('%', ?, '%') OR writer like concat('%', ?, '%') )
                                and finished = 1 and dueDate between ? and ? order by tno desc limit ?, ?   -->

    <!-- 전체 데이터의 개수 가져오기 -->
    <select id="getCount" resultType="int">
        select count(tno) from tbl_todo
        <!-- 동적 쿼리를 통해 검색된 데이터 수 가져오기 -->
        <include refid="search"></include>
    </select>

</mapper>